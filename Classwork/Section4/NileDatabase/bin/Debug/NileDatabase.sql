/*
Deployment script for NileDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "NileDatabase"
:setvar DefaultFilePrefix "NileDatabase"
:setvar DefaultDataPath "C:\Users\cole.miller218\AppData\Local\Microsoft\VisualStudio\SSDT\Nile"
:setvar DefaultLogPath "C:\Users\cole.miller218\AppData\Local\Microsoft\VisualStudio\SSDT\Nile"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[Products]...';


GO
CREATE TABLE [dbo].[Products] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [Name]           NVARCHAR (100) NOT NULL,
    [Description]    NVARCHAR (MAX) NULL,
    [Price]          MONEY          NOT NULL,
    [IsDiscontinued] BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [AK_Products_Name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Products]...';


GO
ALTER TABLE [dbo].[Products]
    ADD DEFAULT 0 FOR [IsDiscontinued];


GO
PRINT N'Creating [dbo].[CK_Products_NameSet]...';


GO
ALTER TABLE [dbo].[Products] WITH NOCHECK
    ADD CONSTRAINT [CK_Products_NameSet] CHECK (LEN(Name) > 0);


GO
PRINT N'Creating [dbo].[CK_Products_PricePositive]...';


GO
ALTER TABLE [dbo].[Products] WITH NOCHECK
    ADD CONSTRAINT [CK_Products_PricePositive] CHECK (Price >= 0);


GO
PRINT N'Creating [dbo].[AddProduct]...';


GO
CREATE PROCEDURE [dbo].[AddProduct]
	@name NVARCHAR(100),
    @price MONEY,    
    @description NVARCHAR(MAX) = NULL,
	@isDiscontinued BIT = 0
AS BEGIN
    SET NOCOUNT ON;

    INSERT INTO Products (Name, Price, Description, IsDiscontinued) VALUES (@name, @price, @description, @isDiscontinued)

    SELECT SCOPE_IDENTITY()
END
GO
PRINT N'Creating [dbo].[GetAllProducts]...';


GO
CREATE PROCEDURE [dbo].[GetAllProducts]	
AS BEGIN
    SET NOCOUNT ON;

    SELECT Id, Name, Price, Description, IsDiscontinued
    FROM Products
END
GO
PRINT N'Creating [dbo].[GetProduct]...';


GO
CREATE PROCEDURE [dbo].[GetProduct]
    @id INT
AS BEGIN
    SET NOCOUNT ON;

    SELECT Id, Name, Price, Description, IsDiscontinued
    FROM Products
    WHERE Id = @id
END
GO
PRINT N'Creating [dbo].[RemoveProduct]...';


GO
CREATE PROCEDURE [dbo].[RemoveProduct]
    @id INT
AS BEGIN
    SET NOCOUNT ON;

    DELETE FROM Products
    WHERE Id = @id
END
GO
PRINT N'Creating [dbo].[UpdateProduct]...';


GO
CREATE PROCEDURE [dbo].[UpdateProduct]
    @id INT,
	@name NVARCHAR(100),
    @price MONEY,    
    @description NVARCHAR(MAX) = NULL,
	@isDiscontinued BIT = 0
AS BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT * FROM Products WHERE Id = @id)
	BEGIN
		RAISERROR('Product not found', 16, 1)
		RETURN
	END

	UPDATE Products
	SET 
		Name = @name,
		Description = @description, 
		Price = @price,
		IsDiscontinued = @isDiscontinued
	WHERE Id = @id
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DECLARE @count INT

SELECT @count = COUNT(*) FROM Products

IF @count = 0
BEGIN
    INSERT INTO Products (Name, Description, Price, IsDiscontinued) VALUES
        ('Windows Phone', 'Windows 10 Phone', 100, 0),
        ('Galaxy S7', 'Good phone', 650, 0),
        ('Galaxy Note 7', 'FAA ban edition', 150, 1),
        ('iPhone X', 'Outdated', 1900, 1)
END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Products] WITH CHECK CHECK CONSTRAINT [CK_Products_NameSet];

ALTER TABLE [dbo].[Products] WITH CHECK CHECK CONSTRAINT [CK_Products_PricePositive];


GO
PRINT N'Update complete.';


GO
